# Copyright 2025 Said Emirhan DÃ¶ke
# Licensed under the Apache License, Version 2.0
translations = {
    "ThresholdingFrame": "ðŸ“Œ Threshold Information\n\n"
        "Input Image: Must be a grayscale image. It can also work on colored images, but the best results are obtained with **grayscale** images.\n"
        "Output Image: Returns as a binary image\n\n"
        "â€¢ Threshold: A value between 0 and 255. This threshold value is used to binarize the pixels in the image.\n\n"
        "â€¢ Threshold Type:\n"
        "  - Binary: Pixel value is set to 255 (white) if greater than the threshold, otherwise 0 (black).\n"
        "  - Binary Inverse: Pixel value is set to 0 (black) if greater than the threshold, otherwise 255 (white).\n\n",
        
    "GaborFilterFrame": "ðŸ“Œ Gabor Filter Parameters\n\n"
        "Input Image: Must be a grayscale image. It can also work on colored images, but the best results are obtained with **grayscale** images.\n"
        "Output Image: Returns a grayscale image with the Gabor filter applied.\n\n"
        "â€¢ Ksize: Kernel size. Must be a positive odd number. E.g., 3, 5, 7...\n"
        "â€¢ Sigma: Standard deviation of the Gaussian distribution. Typical range: 1.0 - 10.0\n"
        "â€¢ Theta: Orientation of the filter (in radians). A value between 0 and pi.\n"
        "â€¢ Lambda: Wavelength of the sinusoidal component. Must be positive. E.g., 4.0\n"
        "â€¢ Gamma: Aspect ratio. Typically between 0 and 1. 1: circular, <1: elliptical.\n"
        "â€¢ Phi: Phase offset. Can take values between 0 and 2*pi.\n\n"
        "ðŸŽ¯ Note: Works better with grayscale images.",
        
    "MorphologicalFrame": "ðŸ“Œ Morphological Operations Parameters\n\n"
        "Input Image: Must be a grayscale image. It can also work on colored images, but the best results are obtained with **grayscale** images.\n"
        "Output Image: Returns a grayscale or colored image with morphological operations applied.\n\n"
        "â€¢ Kernel Size: Size of the structural element. Must be a positive odd number. E.g., 3, 5, 7...\n"
        "â€¢ Kernel Shape: Shape of the kernel. Can be Rectangular, Ellipse, or Cross.\n"
        "â€¢ Operations: Select the morphological operation to apply:\n"
        "  - Erode: Shrinks objects.\n"
        "  - Dilation: Expands objects.\n"
        "  - Opening: Noise removal (erode followed by dilation).\n"
        "  - Closing: Closes small gaps (dilation followed by erode).\n"
        "  - Gradient: Extracts edges (dilation - erode).\n"
        "  - Top Hat: Original image - Opening result.\n"
        "  - Black Hat: Closing result - Original image.\n"
        "â€¢ Iterations: Specifies how many times the operation will be applied. Typically 1-5.\n\n"
        "ðŸŽ¯ Note: More effective results are obtained with grayscale images.",
        
    "GammaTransformFrame": "ðŸ“Œ Gamma Transformation Parameters\n\n"
        "Input Image: Works on both grayscale and colored images.\n"
        "Output Image: Returns a grayscale or colored image with gamma transformation applied.\n\n"
        "â€¢ Gamma Value: A positive value that adjusts the brightness of the image. Typically between 0.1 and 5.0.\n"
        "  - Gamma < 1: The image darkens (darker).\n"
        "  - Gamma > 1: The image brightens (lighter).\n\n"
        "ðŸŽ¯ Note: Can change the contrast of the image, but extreme values may cause visual distortions.",
        
    "CannyEdgeDetectorFrame": "ðŸ“Œ Canny Edge Detection Parameters\n\n"
        "Input Image: Must be a grayscale image.\n"
        "Output Image: Returns a grayscale image with Canny edge detection applied.\n\n"
        "â€¢ Kernel Size: Size of the Canny detection kernel. Must be a positive odd number. E.g., 3, 5, 7...\n"
        "â€¢ Low Threshold: The lower threshold value in the Canny algorithm. Must be between 0 and 255.\n"
        "â€¢ Max Threshold: The upper threshold value in the Canny algorithm. Must be between 0 and 255.\n"
        "â€¢ L2gradient: A Boolean parameter for more precision in edge gradient calculation. Specifies whether to use the L2 norm.\n\n"
        "ðŸŽ¯ Note: A lower threshold value detects edges more sensitively. A higher threshold value captures only prominent edges.\n\n",
        
    "HoughTransformFrame": "ðŸ“Œ Circle Detection with Hough Transform Parameters\n\n"
        "Input Image: Must be a grayscale image.\n"
        "Output Image: Returns a **colored** image with circle detection applied using Hough Transform.\n\n"
        "â€¢ Dp: Resolution parameter used in the Hough transform. Typically 1.0 or greater.\n"
        "â€¢ Minimum Distance: Minimum distance between detected circles. Must be a positive integer.\n"
        "â€¢ Param1: High threshold value in the Canny edge detection algorithm. Must be between 0 and 255.\n"
        "â€¢ Param2: Threshold value required to detect circle centers. Must be between 0 and 100.\n"
        "â€¢ Minimum Radius: Minimum radius of the circles to be detected.\n"
        "â€¢ Maximum Radius: Maximum radius of the circles to be detected.\n"
        "â€¢ Mark Color: Color used to mark the detected circles.\n"
        "ðŸŽ¯ Note: For clear circle detection, the input image should have high contrast and clarity.",
        
    "GaussianBlurFrame": "ðŸ“Œ Gaussian Blur Parameters\n\n"
        "Input Image: Can be either colored or grayscale.\n"
        "Output Image: Returns a grayscale or colored image with Gaussian blur applied.\n\n"
        "â€¢ Kernel Size: Kernel size of the Gaussian blur filter. Must be a positive odd number. E.g., 3, 5, 7...\n"
        "â€¢ Sigma_X: Standard deviation along the X-axis. Must be a positive number.\n"
        "â€¢ Sigma_Y: Standard deviation along the Y-axis. Must be a positive number.\n\n"
        "ðŸŽ¯ Note: Gaussian blur is used to reduce noise and smooth the image.",
        
    "KitterIllingworthFrame": "ðŸ“Œ Kittler-Illingworth Optimal Threshold Parameters\n\n"
        "Input Image: Must be a grayscale image.\n"
        "Output Image: Returns the optimal threshold value calculated using the Kittler-Illingworth method. The previous operation's image is returned but not displayed.\n\n"
        "â€¢ Optimum Threshold: The optimal threshold value based on the Kittler-Illingworth method.\n"
        "â€¢ The Kittler-Illingworth method finds the threshold value that separates the two classes (background and foreground) in the image histogram.\n"
        "â€¢ This method determines the threshold value that minimizes the cost considering the variances of the classes.\n\n"
        "ðŸŽ¯ Note: The Kittler-Illingworth method works better on images where bright and dark regions are clearly separated.",
        
    "DrawHistogramFrame": "ðŸ“Œ Image Histogram Drawing Parameters\n\n"
        "Input Image: Can be either colored or grayscale.\n"
        "Output Image: Returns the histogram graph. The previous operation's image is returned but not displayed.\n\n"
        "â€¢ Image Histogram: A graph showing the color intensity distribution of pixels in the image.\n"
        "â€¢ The histogram is used to analyze the distribution of different color intensities in the image.\n"
        "â€¢ This process calculates the frequencies for each pixel's grayscale value and creates a histogram.\n\n"
        "ðŸŽ¯ Note: Histogram analysis is useful for determining contrast, brightness adjustments, or image enhancement techniques.",
        
    "ColorConvertFrame": "ðŸ“Œ Color Conversion Parameters\n\n"
        "â€¢ RGB to Grayscale: Converts a colored image to grayscale. Each pixel's grayscale value is calculated.\n"
        "â€¢ Grayscale to RGB: Converts a grayscale image to a colored (RGB) image. However, the original color information is lost.\n"
        "â€¢ RGB to HSV: Converts a colored image into its Hue, Saturation, and Value components.\n"
        "â€¢ HSV to RGB: Converts an HSV image back to Red-Green-Blue (RGB) format.\n\n"
        "ðŸŽ¯ Note: Choose the appropriate color conversion for image processing and color analysis.",
        
    "ResizeFrame": "ðŸ“Œ Image Resizing Parameters\n\n"
        "Input Image: Can be either colored or grayscale.\n"
        "Output Image: Returns a resized grayscale or colored image.\n\n"
        "â€¢ Width: The new width of the image. Must be a positive integer.\n"
        "â€¢ Height: The new height of the image. Must be a positive integer.\n\n"
        "ðŸŽ¯ Note: Resizing the image may distort the aspect ratio unless explicitly maintained.",
        
    "RotateFrame": "ðŸ“Œ Image Rotation Parameters\n\n"
        "Input Image: Can be either colored or grayscale.\n"
        "Output Image: Returns a rotated grayscale or colored image.\n\n"
        "â€¢ Rotation Angle: The angle by which the image will be rotated. Options: 90Â°, 180Â°, 270Â°.\n\n"
        "ðŸŽ¯ Note: The selected rotation angle rotates the image clockwise.",
        
    "FlipFrame": "ðŸ“Œ Image Flipping Parameters\n\n"
        "Input Image: Can be either colored or grayscale.\n"
        "Output Image: Returns a flipped grayscale or colored image.\n\n"
        "â€¢ Flip Direction: Specifies the direction to flip the image. Options: Horizontal, Vertical, Both.\n\n"
        "ðŸŽ¯ Note: Horizontal flip reverses the image left-to-right; vertical flip reverses it top-to-bottom. Both flips apply both transformations.",
        
    "MedianBlurFrame": "ðŸ“Œ Median Blur Parameters\n\n"
        "Input Image: Can be either colored or grayscale.\n"
        "Output Image: Returns a grayscale or colored image with median blur applied.\n\n"
        "â€¢ Kernel Size: The kernel size used in the median blur algorithm. Typically odd numbers (e.g., 3, 5, 7).\n\n"
        "ðŸŽ¯ Note: Increasing the kernel size results in more blurring but may also reduce details. Useful for smoothing noise in images.",
        
    "BilateralFilterFrame": "ðŸ“Œ Bilateral Filter Parameters\n\n"
        "Input Image: Can be either colored or grayscale.\n"
        "Output Image: Returns a grayscale or colored image with bilateral filtering applied.\n\n"
        "â€¢ Diameter: Diameter of the pixel neighborhood used during filtering. Must be a positive integer.\n"
        "â€¢ Sigma Color: Standard deviation in the color space. Higher values mean more influence from similar colors.\n"
        "â€¢ Sigma Space: Standard deviation in the coordinate space. Higher values mean more influence from distant pixels.\n\n"
        "ðŸŽ¯ Note: Bilateral filtering is ideal for reducing noise while preserving edges.",
        
    "Filter2DFrame": "ðŸ“Œ filter2D Convolution Parameters\n\n"
        "Input Image: Can be either colored or grayscale.\n"
        "Output Image: Returns a grayscale or colored image with convolution applied.\n\n"
        "â€¢ 3x3 Kernel: Specifies the kernel values to apply on the image.\n"
        "  These values determine how neighboring pixels are combined during convolution.\n"
        "  Examples include edge detection, blurring, or sharpening kernels.\n\n"
        "ðŸŽ¯ Note: Clear and high-contrast input images yield more noticeable convolution effects.",
        
    "SobelFrame": "ðŸ“Œ Sobel Edge Detection Parameters\n\n"
        "Input Image: Works on colored images as well, but the best results are obtained with **grayscale** images.\n"
        "Output Image: Returns a grayscale or colored image with Sobel edge detection applied.\n\n"
        "â€¢ dx: Specifies whether to compute the derivative in the x-direction. 1 detects horizontal edges.\n"
        "â€¢ dy: Specifies whether to compute the derivative in the y-direction. 1 detects vertical edges.\n"
        "â€¢ Kernel Size: The kernel size used in the Sobel filter. Must be a positive odd number (e.g., 1, 3, 5).\n\n"
        "ðŸŽ¯ Note: If both dx and dy are set to 1, both horizontal and vertical edges are detected.",
        
    "ScharrFrame": "ðŸ“Œ Scharr Edge Detection Parameters\n\n"
        "Input Image: Must be a grayscale image. Works on colored images as well, but the best results are obtained with **grayscale** images.\n"
        "Output Image: Returns a grayscale or colored image with Scharr edge detection applied.\n\n"
        "â€¢ dx: Specifies whether to compute the derivative in the x-direction. 1 detects horizontal edges.\n"
        "â€¢ dy: Specifies whether to compute the derivative in the y-direction. 1 detects vertical edges.\n\n"
        "ðŸŽ¯ Note: The Scharr filter provides more accurate results than the Sobel filter, especially for small kernel sizes (e.g., 3x3).",
        
    "LaplacianFrame": "ðŸ“Œ Laplacian Edge Detection Parameters\n\n"
        "Input Image: Must be a grayscale image. Works on colored images as well, but the best results are obtained with **grayscale** images.\n"
        "Output Image: Returns a grayscale or colored image with Laplacian edge detection applied.\n\n"
        "â€¢ Kernel Size: The kernel size used for computing the derivative. Must be a positive odd number (e.g., 1, 3, 5).\n\n"
        "ðŸŽ¯ Note: The Laplacian operator detects edges symmetrically by using the second derivative of the image.",
        
    "CornerHarrisFrame": "ðŸ“Œ Harris Corner Detection Parameters\n\n"
        "Input Image: Must be a grayscale image. Works on colored images as well, but the best results are obtained with **grayscale** images.\n"
        "Output Image: Returns a colored image with Harris corner detection applied.\n\n"
        "â€¢ Block Size: The size of the neighborhood considered for corner detection.\n"
        "â€¢ Sobel Kernel Size: The size of the Sobel filter used for derivative computation.\n"
        "â€¢ k Value: Free parameter in the Harris equation (typically between 0.04 and 0.06).\n\n"
        "ðŸŸ¥ High response areas are marked in red, indicating potential corners.",
        
    "GoodFeaturesToTrackFrame": "ðŸ“Œ Corner Detection: goodFeaturesToTrack\n\n"
        "Input Image: Must be a grayscale image.\n"
        "Output Image: Returns a colored image with corner detection applied.\n\n"
        "â€¢ Max Corners: The maximum number of corners to detect.\n"
        "â€¢ Quality Level: The minimum quality threshold for detected corners (between 0 and 1).\n"
        "â€¢ Min Distance: The minimum distance between detected corners (in pixels).\n\n"
        "ðŸŸ¢ Detected corners are marked with green circles.",
        
    "AdaptiveThresholdFrame": "ðŸ“Œ Adaptive Thresholding: adaptiveThreshold\n\n"
        "Input Image: Must be a grayscale image.\n"
        "Output Image: Returns a grayscale image with adaptive thresholding applied.\n\n"
        "â€¢ Max Value: The maximum value assigned to pixels above the threshold.\n"
        "â€¢ Adaptive Method: Local mean (Mean) or Gaussian-weighted mean (Gaussian).\n"
        "â€¢ Threshold Type: Binary (black and white) or Binary Inverted (white and black).\n"
        "â€¢ Block Size: The size of the neighborhood used for thresholding (must be an odd number >1).\n"
        "â€¢ C: A constant subtracted from the mean or weighted mean.\n\n"
        "ðŸ“„ This operation works only on grayscale images.",
        
    "OtsuThresholdFrame": "ðŸ“Œ Otsu Thresholding: cv2.threshold + THRESH_OTSU\n\n"
        "Input Image: Must be a grayscale image.\n"
        "Output Image: Returns the optimal Otsu threshold. The previous operation's image is returned but not displayed.\n\n"
        "â€¢ Max Value: The maximum value assigned to pixels above the threshold.\n"
        "â€¢ Threshold Type: Binary (black and white) or Binary Inverted (white and black).\n\n"
        "ðŸ“„ The Otsu method automatically determines the ideal threshold.\n"
        "ðŸ“„ Works only on grayscale images.",
        
    "FindContoursFrame": "ðŸ“Œ Contour Detection (FindContours): cv2.findContours\n\n"
        "Input Image: Must be a grayscale image with prior edge detection (Canny Edge Detection is recommended).\n"
        "Output Image: Returns a colored image with detected contours.\n\n"
        "â€¢ Retrieval Mode:\n"
        "   - RETR_EXTERNAL: Retrieves only the external contours.\n"
        "   - RETR_LIST: Retrieves all contours as a flat list.\n"
        "   - RETR_TREE: Retrieves contours with hierarchy.\n\n"
        "â€¢ Approximation Method:\n"
        "   - CHAIN_APPROX_SIMPLE: Compresses horizontal, vertical, and diagonal segments.\n"
        "   - CHAIN_APPROX_NONE: Stores all contour points.\n\n",
        
    "DrawContoursFrame": "ðŸ“Œ Drawing Contours (DrawContours): cv2.drawContours\n\n"
        "Input Image: Must be a grayscale image with prior edge detection (Canny Edge Detection is recommended).\n"
        "Output Image: Returns a colored image with drawn contours.\n\n"
        "â€¢ Contour Thickness:\n"
        "   - Specifies the thickness of the contour lines.\n\n"
        "â€¢ Contour Color:\n"
        "   - Specifies the color used to draw the contours.\n\n",
        
    "HoughLinesFrame": "ðŸ“Œ Hough Line Transform (HoughLines): cv2.HoughLines\n\n"
        "Input Image: Must be a grayscale image with prior edge detection (Canny Edge Detection is recommended).\n"
        "Output Image: Returns a colored image with Hough line transform applied.\n\n"
        "â€¢ Rho (Distance Resolution):\n"
        "   - The resolution of the accumulator in pixels.\n\n"
        "â€¢ Theta (Angle Resolution):\n"
        "   - The resolution of the accumulator in radians.\n\n"
        "â€¢ Threshold:\n"
        "   - The minimum number of intersections required to detect a line.\n\n",
        
    "DFTFrame": "ðŸ“Œ Discrete Fourier Transform (DFT) Parameters\n\n"
        "The image is first converted to grayscale, then DFT is applied. The result is normalized and displayed as a magnitude spectrum.",
        
    "NumpyFFTFrame": "ðŸ“Œ Fourier Transform (FFT) and Inverse Fourier Transform (IFFT) Parameters\n\n"
        "Input Image: Must be a grayscale image.\n\n"
        "Output Image: Returns a grayscale image with FFT or IFFT applied.\n"
        "â€¢ Transformation Type: Select the type of transformation to apply: FFT (Fourier Transform) or IFFT (Inverse Fourier Transform).\n\n"
        "ðŸŽ¯ Note: The image is converted to float32 format. Depending on the selected transformation:\n"
        "  - FFT: The image undergoes Fourier Transform, and the zero frequency is shifted to the center. The result is displayed as a magnitude spectrum.\n"
        "  - IFFT: The image undergoes Fourier Transform followed by Inverse Fourier Transform to reconstruct the image.",
        
    "EqualizeHistFrame": "ðŸ“Œ Histogram Equalization (EqualizeHist) Parameters\n\n"
        "Input Image: Must be a grayscale image.\n"
        "Output Image: Returns a histogram-equalized grayscale image.\n\n"
        "â€¢ Histogram Equalization: Enhances the contrast of the image by redistributing pixel intensity values.\n\n"
        "ðŸŽ¯ Note: Histogram equalization is commonly used to improve visual contrast and balance brightness levels.",
        
    "CLAHEFrame": "ðŸ“Œ CLAHE (Contrast Limited Adaptive Histogram Equalization) Parameters\n\n"
        "Input Image: Can be either colored or grayscale.\n"
        "Output Image: Returns a grayscale or colored image with CLAHE applied.\n\n"
        "â€¢ Clip Limit: Specifies the degree of contrast limiting. Higher values result in sharper contrasts.\n"
        "â€¢ Tile Grid Size: Specifies the size of the grid for local histogram equalization. Smaller grids yield more detailed results.\n\n"
        "ðŸŽ¯ Note: CLAHE is particularly useful for enhancing contrast in images with uneven lighting conditions.",
    
    "DatasetProcessInfo": "ðŸ“Œ Dataset Processing Steps\n\n"
        "1- Create Process and fill the parameters.\n"
        "2- Select the source folder.\n"
        "3- Select the destination folder.\n"
        "4- Click the **Prepare Dataset** button.",
    
    "Msezgin_MultiThresholdingFrame": "ðŸ“Œ Multi-Thresholding Parameters\n\n"
        "Input Image: Must be a grayscale image.\n"
        "Output Image: Returns input image.",
    
    "Settings_Title": "Settings",
    
    "User_Settings": "User Settings",
    
    "Warning_Label": "If you make changes to the settings, press the 'save' button.",
    
    "Show_Load_Image_Details_Settings": "Show Load Image Details",
    
    "Language_Select_Settings": "Language Select",
    
    "Theme_Select_Settings": "Theme Select",
    
    "Process_Position_Settings": "Process Position",
    
    "Height_Settings": "Height",
    
    "Infinity_One_Lines_Settings": "Infinity One Lines",
    
    "Save_Button_Settings": "Save",
    
    "Dataset_Process_Settings_Title": "Dataset Process Settings",
    
    "Dataset_Process_Settings": "Dataset Process Settings",
    
    "Dataset_Process_Settings_Warning_Label": "If you make changes to the settings, press the 'save' button\n"
        "then click the 'Process Dataset' button.",
        
    "Select_Folder_Layout_Settings": "Select Folder Layout",
    
    "Select_Folder_Layout_Settings_Warning_Label": "Image or subfolder names are not important",
    
    "Process_Dataset_Button": "Process Dataset",
    
    "Save_Button_MessageBox_Title": "Settings Saved",
    
    "Save_Button_MessageBox_Text": "Saved successfully. Please restart the application to apply some changes.",
    
    "Folder_Type_MessageBox_Title": "Warning",
    
    "Folder_Type_MessageBox_Text": "Please select a folder type.",
    
    "Check_Image_Settings": "Check Image Setting",
    
}
